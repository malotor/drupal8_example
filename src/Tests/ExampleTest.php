<?php

/**
 * @file
 * Example module functional test
 */

namespace Drupal\example\Tests;

use Drupal\simpletest\WebTestBase;
use Symfony\Component\Validator\Constraints\True;

/**
 *
 * @ingroup MyExampleWebTest
 *
 * SimpleTest uses group annotations to help you organize your tests.
 * @group MyExampleWebTest
 * @group MyExampleWebTest
 */
class ExampleTest extends WebTestBase {

  /**
   * Our module dependencies.
   *
   * In Drupal 8's SimpleTest, we declare module dependencies in a public
   * static property called $modules. WebTestBase automatically enables these
   * modules for us.
   *
   * @var array
   */
  static public $modules = array('example');

  /**
   * The installation profile to use with this test.
   *
   * We use the 'minimal' profile so that there are some reasonable default
   * blocks defined, and so we can see the menu link created by our module.
   *
   * @var string
   */
  protected $profile = 'minimal';

  /**
   * Test Example HomePage.
   *
   * Enable Example and see if home page is available
   */
  public function testSimpleTestHome() {
    // Test for a link to the simpletest_example in the Tools menu.
    $this->drupalGet('');
    $this->assertResponse(200, 'The Home page is available.');
  }

  /**
   * Test Example Demo Service.
   *
   * Check if "demo_service" is returing the "Hello Word" message
   */
  public function testSimpleTestDemoService() {
    $this->drupalGet('demo_service');
    $this->assertResponse(200, 'Demo Service is available');
    $this->assertRaw('Hello World');
  }
  /**
   * Test Example Calculator Form.
   *
   * Check if all fields for calculator form are correctly rendered and the form submit is working
   */
  public function testSimpleTestCalculatorForm() {

    //Tests the form is created
    $this->drupalGet('example-form');
    $this->assertResponse(200, 'Demo Service is available');
    $this->assertFieldByName('firts_number', null, 'Firts number field is available');
    $this->assertFieldByName('second_number', null, 'Second number field is available');
    $this->assertFieldByName('operation', null, 'Operation field is available');

  }

  /**
   * Test Example Calculator Form Submit.
   *
   * Check if calculator form submit works
   */
  public function testSimpleTestCalculatorFormSubmit() {

    //Test the form submit
    $edit = array(
      'firts_number' => '2',
      'second_number' => '3',
      'operation' => 'add',
    );
    $this->drupalPostForm('example-form', $edit, t('Save'));
    $this->assertRaw('The result is 5');

  }
  /**
   * Test Example Secret Zone.
   *
   * Check if anonymous user can access Secret Page.
   * Check if an user with 'access secret zone' permission can access Secret page
   */
  public function testSimpleTestSecretZone() {
    $this->drupalGet('secret');
    $this->assertResponse(403, 'Anonymous users canÂ´t acces secret zone');

    // permission is generated by the node module.
    $user = $this->drupalCreateUser(array('access secret zone'));
    // Log in our user.
    $this->drupalLogin($user);
    $this->drupalGet('secret');
    $this->assertResponse(200, 'Secret zone is available');
  }

  /**
   * Detect if we're running on PIFR testbot.
   *
   * We can skip intentional failure if we're on the testbot. It happens that
   * on the testbot the site under test is in a directory named 'checkout' or
   * 'site_under_test'.
   *
   * @return bool
   *   TRUE if running on testbot.
   */
  public function runningOnTestbot() {
    return (file_exists("../checkout") || file_exists("../site_under_test"));
  }

}
